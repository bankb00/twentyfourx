package com.twentyfourx.APIController;

/**
 * Created by Thanawat on 3/11/2017.
 */

import com.twentyfourx.Entity.Booth;
import com.twentyfourx.Entity.Exhibition;
import com.twentyfourx.Repository.BoothRepository;
import com.twentyfourx.Repository.ExhibitionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.sql.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@RestController //Test
@Controller    // This means that this class is a Controller
@RequestMapping(path="/exhibition") // This means URL's start with /demo (after Application path)
public class ExhibitionController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ExhibitionRepository exhibitionRepository;
    @Autowired
    private BoothRepository boothRepository;
    /*@Autowired
    private BoothContactRepository boothContactRepository;*/

    private List<String> categories = new ArrayList<>(Arrays.asList("Food", "Home & Decorate","Technology & Electronics Devices"
            ,"Book Fair","Travel & Tourism","Motor Show","Trade Show","Business","Pet","Cloth & Fashion"));


    //@RequestMapping(value = "/getsize", method = RequestMethod.GET)
    public void checkSize() throws SQLException {
        List<Exhibition> listEx = exhibitionRepository.findAll();

        String url = "jdbc:mysql://localhost:3306/bankza";
        Connection conn = DriverManager.getConnection(url,"root","password");
        boolean status;
        int size = listEx.size();
        int id;
        for(int i = 0 ; i<size ; i++){
            //boolean status = listEx.get(i).checkDate();
            listEx.get(i).setPassed(listEx.get(i).checkDate());
            status = listEx.get(i).checkDate();
            id = listEx.get(i).getId();
            try
        {
            Statement st = conn.createStatement();
            if(status==true) {
                st.executeUpdate("UPDATE exhibition SET is_passed= 1 WHERE id = " + id + "");
            }
            else {
                st.executeUpdate("UPDATE exhibition SET is_passed= 0 WHERE id = " + id + "");
            }


        }
        catch (SQLException ex)
        {
            System.err.println(ex.getMessage());
        }
        }
    }


    /*@GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addExhibition () {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Exhibition exhibition = new Exhibition();
        exhibition.setExhibitionName(name);
        exhibitionRepository.save(exhibition);

        String  str = "INSERT INTO ticket (exhibition_id, start_date, end_date, holder_name, holder_role, is_expired, can_register)" +
                "VALUES (1, '2017-2-5', '2017-2-7', 'bankbank', 'visitor', 0, 0)";

        try {
            String url = "jdbc:mysql://localhost:3306/bankza";
            Connection conn = DriverManager.getConnection(url,"root","password");
            Statement stmt = conn.createStatement();

            stmt.executeUpdate(str);

            conn.close();
        }
        catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }

        return "Saved";
    }*/

    //Pageable Exhibition
    @RequestMapping(value = "/", method = RequestMethod.GET)
    Page<Exhibition> exhibitionsPageable(Pageable pageable) {
        return exhibitionRepository.findAll(pageable);

    }

    //list All Exhibition
    @RequestMapping(value="/all",method= RequestMethod.GET)
    public @ResponseBody Iterable<Exhibition> getAllExhibitions() {
        // This returns a JSON or XML with the users
        return exhibitionRepository.findAll();
        //return exhibitionRepository.
    }

    //get exhibition
    @RequestMapping(value = "/{exhibitionId}", method=RequestMethod.GET)
    public Exhibition getExhibition(@PathVariable int exhibitionId){
        return  exhibitionRepository.findById(exhibitionId);

    }

    //get booths
    @RequestMapping(value="/{exhibitionId}/booths",method= RequestMethod.GET)
    public @ResponseBody List<Booth> getAllBooths(@PathVariable int exhibitionId){
        // This returns a JSON or XML with the users
        return boothRepository.findBoothByExhibitionId(exhibitionId);


    }

    //Filter By category
    @RequestMapping(value="/category",method = RequestMethod.GET)
    @ResponseBody
    public List<Exhibition> filterByCategory(@RequestParam String category){
        return exhibitionRepository.findByCategory(category);
    }

    //List of Category
    @RequestMapping(value="/categories",method= RequestMethod.GET)
    public @ResponseBody List<String> getAllCategories() {

        return categories;
    }


    //Get booth
    @RequestMapping(value="/{exhibitionId}/booths/{boothId}",method= RequestMethod.GET)
    public @ResponseBody Booth getBooth(@PathVariable int boothId){
        // This returns a JSON or XML with the users
        return boothRepository.findBoothById(boothId);


    }

    //Get Latest booth
    @RequestMapping(value="/testLatest",method = RequestMethod.GET)
    //@ResponseBody
    public List<Exhibition> getLatestExhibition(@RequestParam boolean isPassed){
        return exhibitionRepository.findByIsPassed(isPassed);
    }

    //get all latest Exhibition
    @RequestMapping(value="/latest",method = RequestMethod.GET)
    @ResponseBody
    public List<Exhibition> getUnPassExhibition() throws SQLException {
        checkSize();
        List<Exhibition> listEx= new ArrayList<Exhibition>();
        try {
            String url = "jdbc:mysql://localhost:3306/bankza";
            Connection conn = DriverManager.getConnection(url,"root","password");
            Statement stmt = conn.createStatement();
            ResultSet rs;


            rs = stmt.executeQuery("SELECT * FROM exhibition WHERE is_passed = false "+" ORDER BY start_date ASC");
            while ( rs.next() ) {
                //String lastName = rs.getString("name");
                //System.out.println(lastName);
                int id = rs.getInt("id");
                String name = rs.getString("name");
                String description = rs.getString("description");
                String location = rs.getString("location");
                String category = rs.getString("category");
                String startDate = rs.getString("start_date");
                String endDate = rs.getString("end_date");
                String posterUrl = rs.getString("poster_url");
                boolean isFavourited = rs.getBoolean("is_favourited");
                Double latitude = rs.getDouble("latitude");
                Double longtitude = rs.getDouble("longtitude");
                String agendaUrl = rs.getString("agenda_url");
                String mapUrl = rs.getString("map_url");
                boolean isPassed = rs.getBoolean("is_passed");

                Exhibition exhibition = new Exhibition(id,name,description,location,category,startDate,endDate,posterUrl,isFavourited,latitude
                ,longtitude,agendaUrl,mapUrl,isPassed);

                listEx.add(exhibition);
            }
            conn.close();
            }
            catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        return listEx;


    }

    @RequestMapping(value="/{exhibitionId}/register",method= RequestMethod.POST)
    public @ResponseBody
    void registerExhibition (@PathVariable int exhibitionId) {

        int exhibition_id = exhibitionId;
        int user_id = 1; //userid

        String  str = "INSERT INTO ticket (exhibition_id, user_id, start_date, end_date, holder_name, holder_role, is_expired, can_register)" +
                "VALUES ("+exhibition_id+","+user_id+", '2017-02-5', '2017-02-7', 'bankbank', 'visitor', 0, 0)";

        try {
            String url = "jdbc:mysql://localhost:3306/bankza";
            Connection conn = DriverManager.getConnection(url,"root","password");
            Statement stmt = conn.createStatement();

            stmt.executeUpdate(str);

            conn.close();
        }
        catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }


    }

}









