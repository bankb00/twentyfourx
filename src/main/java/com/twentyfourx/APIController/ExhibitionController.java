package com.twentyfourx.APIController;

/**
 * Created by Thanawat on 3/11/2017.
 */

import com.twentyfourx.Entity.Booth;
import com.twentyfourx.Entity.Exhibition;
import com.twentyfourx.Repository.BoothRepository;
import com.twentyfourx.Repository.ExhibitionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@RestController //Test
@Controller    // This means that this class is a Controller
@RequestMapping(path="/exhibition") // This means URL's start with /demo (after Application path)
public class ExhibitionController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ExhibitionRepository exhibitionRepository;
    @Autowired
    private BoothRepository boothRepository;
    /*@Autowired
    private BoothContactRepository boothContactRepository;*/

    private List<String> categories = new ArrayList<>(Arrays.asList("Food", "Home & Decorate","Technology & Electronics Devices"
            ,"Book Fair","Travel & Tourism","Motor Show","Trade Show","Business","Pet","Cloth & Fashion"));


    @RequestMapping(value = "/getsize", method = RequestMethod.GET)
    public void checkSize(){
        List<Exhibition> listEx = exhibitionRepository.findAll();

        int size = listEx.size();
        System.out.println(size);
        for(int i = 0 ; i<size ; i++){
            //boolean status = listEx.get(i).checkDate();
            listEx.get(i).setPassed(listEx.get(i).checkDate());
            System.out.println(" ");
            System.out.println(listEx.get(i).isPassed());
            System.out.println(listEx.get(i).getStartDate());
        }
    }


    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addExhibition (@RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        //Exhibition exhibition = new Exhibition();
        //exhibition.setExhibitionName(name);
        //exhibitionRepository.save(exhibition);

        return "Saved";
    }

    //Pageable Exhibition
    @RequestMapping(value = "/", method = RequestMethod.GET)
    Page<Exhibition> exhibitionsPageable(Pageable pageable) {
        return exhibitionRepository.findAll(pageable);

    }

    //list All Exhibition
    @RequestMapping(value="/all",method= RequestMethod.GET)
    public @ResponseBody Iterable<Exhibition> getAllExhibitions() {
        // This returns a JSON or XML with the users
        return exhibitionRepository.findAll();
        //return exhibitionRepository.
    }

    //get exhibition
    @RequestMapping(value = "/{exhibitionId}", method=RequestMethod.GET)
    public Exhibition getExhibition(@PathVariable int exhibitionId){
        return  exhibitionRepository.findById(exhibitionId);

    }

    //get booths
    @RequestMapping(value="/{exhibitionId}/booths",method= RequestMethod.GET)
    public @ResponseBody List<Booth> getAllBooths(@PathVariable int exhibitionId){
        // This returns a JSON or XML with the users
        return boothRepository.findBoothByExhibitionId(exhibitionId);


    }

    //Filter By category
    @RequestMapping(value="/category",method = RequestMethod.GET)
    @ResponseBody
    public List<Exhibition> filterByCategory(@RequestParam String category){
        return exhibitionRepository.findByCategory(category);
    }

    //List of Category
    @RequestMapping(value="/categories",method= RequestMethod.GET)
    public @ResponseBody List<String> getAllCategories() {

        return categories;
    }


    //Get booth
    @RequestMapping(value="/{exhibitionId}/booths/{boothId}",method= RequestMethod.GET)
    public @ResponseBody Booth getBooth(@PathVariable int boothId){
        // This returns a JSON or XML with the users
        return boothRepository.findBoothById(boothId);


    }

    //Get Latest booth
    @RequestMapping(value="/testLatest",method = RequestMethod.GET)
    //@ResponseBody
    public List<Exhibition> getLatestExhibition(@RequestParam boolean isPassed){
        return exhibitionRepository.findByIsPassed(isPassed);
    }

    //test sql
    @RequestMapping(value="/testSQL",method = RequestMethod.GET)
    @ResponseBody
    public List<Exhibition> getPassExhibition(){
        checkSize();
        List<Exhibition> listEx= new ArrayList<Exhibition>();
        try {
            String url = "jdbc:mysql://localhost:3306/bankza";
            Connection conn = DriverManager.getConnection(url,"root","password");
            Statement stmt = conn.createStatement();
            ResultSet rs;


            rs = stmt.executeQuery("SELECT * FROM exhibition WHERE is_passed = false "+" ORDER BY start_date ASC");
            while ( rs.next() ) {
                //String lastName = rs.getString("name");
                //System.out.println(lastName);
                int id = rs.getInt("id");
                String name = rs.getString("name");
                String description = rs.getString("description");
                String location = rs.getString("location");
                String category = rs.getString("category");
                String startDate = rs.getString("start_date");
                String endDate = rs.getString("end_date");
                String posterUrl = rs.getString("poster_url");
                boolean isFavourited = rs.getBoolean("is_favourited");
                Double latitude = rs.getDouble("latitude");
                Double longtitude = rs.getDouble("longtitude");
                String agendaUrl = rs.getString("agenda_url");
                String mapUrl = rs.getString("map_url");
                boolean isPassed = rs.getBoolean("is_passed");

                Exhibition exhibition = new Exhibition(id,name,description,location,category,startDate,endDate,posterUrl,isFavourited,latitude
                ,longtitude,agendaUrl,mapUrl,isPassed);

                listEx.add(exhibition);
            }
            conn.close();
            }
            catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        return listEx;
    }

    /*@RequestMapping(value="/testDate/{id}",method= RequestMethod.GET)
    public  void test(@PathVariable int id) throws ParseException {
        //DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
        //LocalDate localDate = LocalDate.now();
        //System.out.println(dtf.format(localDate)); //2016/11/16
        exhibitionRepository.findById(id).checkDate();
        //System.out.println(exhibitionRepository.findById(1).getStartDate());

    }*/


}









//import com.twentyfourx.Entity.Exhibition;
//import com.twentyfourx.Repository.ExhibitionRepository;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.transaction.annotation.Isolation;
//import org.springframework.transaction.annotation.Transactional;
//import org.springframework.web.bind.annotation.*;
//@RestController
//@RequestMapping("/api")
//@Transactional(readOnly = false, rollbackFor = Exception.class,
//        isolation = Isolation.READ_COMMITTED)
//public class ExhibitionController {
//    private ExhibitionRepository exhibitionRepository;
//    @Autowired
//    public ExhibitionController(ExhibitionRepository exhibitionRepository) {
//        this.exhibitionRepository = exhibitionRepository;
//    }
//    @RequestMapping(value = "", method = RequestMethod.POST)
//    public int addExhibition(@RequestBody Exhibition exhibition) {
//        exhibitionRepository.add(exhibition);
//        return exhibition.getExhibitionId();
//    }
///*    @RequestMapping(value = "", method = RequestMethod.GET)
//    public List<Patient> getAllPatients() {
//        return patientRepository.getAll();
//    }*/
//
//    /*@RequestMapping(value = "/{exhibitionId}", method = RequestMethod.GET)
//    public Exhibition getExhibition(@PathVariable int exhibitionId) {
//        return exhibitionRepository.get(exhibitionId);
//    }*/
//    @RequestMapping(value = "/1", method = RequestMethod.GET)
//    public Exhibition getExhibition() {
//        return exhibitionRepository.get(1);
//    }
//
//    /*@RequestMapping(value = "/get", method = RequestMethod.GET)
//    public int getExhibition() {
//        return 123;
//    }*/
//
//    @RequestMapping(value = "/{exhibitionId}", method = RequestMethod.PUT)
//    public void updateExhibition(@PathVariable int exhibitionId,
//                              @RequestBody Exhibition exhibitionRequest) {
//        Exhibition exhibition = exhibitionRepository.get(exhibitionId);
//        exhibition.setExhibitionName(exhibitionRequest.getExhibitionName());
//    }
//    @RequestMapping(value = "/{exhibitionId}", method = RequestMethod.DELETE)
//    public void removeExhibition(@PathVariable int exhibitionId) {
//        Exhibition exhibition = exhibitionRepository.get(exhibitionId);
//        exhibitionRepository.remove(exhibition);
//    }
//}