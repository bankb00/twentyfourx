package com.twentyfourx.APIController;

/**
 * Created by Thanawat on 3/11/2017.
 */

import com.twentyfourx.Entity.*;
import com.twentyfourx.Repository.BoothRepository;
import com.twentyfourx.Repository.ExhibitionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@RestController //Test
@Controller    // This means that this class is a Controller
@RequestMapping(path="/exhibitions") // This means URL's start with /demo (after Application path)
public class ExhibitionController {
    private final String dbUrl = "thanawat.cdcwrwrcobem.ap-southeast-1.rds.amazonaws.com";
    private final String url = "jdbc:mysql://" + dbUrl + ":3306/bankza";

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ExhibitionRepository exhibitionRepository;
    @Autowired
    private BoothRepository boothRepository;

    private List<String> categories = new ArrayList<>(Arrays.asList("Food", "Home & Decorate","Technology"
            ,"Book Fair","Travel & Tourism","Motor Show","Trade Show","Business","Pet","Cloth & Fashion","Education","Others"));

    private List<String> departments = new ArrayList<>(Arrays.asList("All","Computer","Chemical","Civil","Electronics"
            ,"Food","Instrumentation & Control","Industrial","Mechanical","Electrical","Telecomunication"));

    //@RequestMapping(value = "/getsize", method = RequestMethod.GET)
    public void checkSize() throws SQLException {
        List<Exhibition> listEx = exhibitionRepository.findAll();

        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        boolean status;
        int size = listEx.size();
        int id;
        for(int i = 0 ; i<size ; i++){
            //boolean status = listEx.get(i).checkDate();
            listEx.get(i).setIsExpired(listEx.get(i).checkDate());
            status = listEx.get(i).checkDate();
            id = listEx.get(i).getId();
            try
        {
            Statement st = conn.createStatement();
            if(status==true) {
                st.executeUpdate("UPDATE exhibition SET is_expired= 1 WHERE id = " + id + "");
            }
            else {
                st.executeUpdate("UPDATE exhibition SET is_expired= 0 WHERE id = " + id + "");
            }


        }
        catch (SQLException ex)
        {
            System.err.println(ex.getMessage());
        }
        }
    }



    //Pageable Exhibition
    @RequestMapping(value = "/", method = RequestMethod.GET)
    Page<Exhibition> exhibitionsPageable(Pageable pageable) {
        return exhibitionRepository.findAll(pageable);

    }

    //get Banner
    @RequestMapping(value = "/getBanner", method = RequestMethod.GET)
    public BannerList getBanner() throws SQLException {
        //List of banner
        checkSize();
        List<BannerObject> listBanner = new ArrayList<BannerObject>();
        BannerList bannerList = new BannerList();

        List<ExhibitionObjectForBanner> listEx = new ArrayList<ExhibitionObjectForBanner>();
        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        Statement stmt = conn.createStatement();
        ResultSet rs;
        ResultSet abc;
        //get user id;
        try {

            rs = stmt.executeQuery("SELECT * FROM banner ");
            while (rs.next()) {
                int id = rs.getInt("id");
                String bannerUrl = rs.getString("banner_url");
                int exhibitionId = rs.getInt("exhibition_id");

                BannerObject object = new BannerObject(id,bannerUrl,exhibitionId);
                listBanner.add(object);
            }
            //conn.close();
        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }

        bannerList.setBanners(listBanner);
        //return
        //return listBanner;
        try {

            abc = stmt.executeQuery("SELECT * FROM exhibition WHERE is_expired = FALSE ");
            while (abc.next()) {
                String name = abc.getString("name");
                int exhibitionId = abc.getInt("id");
                ExhibitionObjectForBanner exhibitionObjectForBanner = new ExhibitionObjectForBanner(name,exhibitionId);
                listEx.add(exhibitionObjectForBanner);
            }
            //conn.close();
        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        bannerList.setExhibitions(listEx);
        conn.close();
        return bannerList;
    }

    //getUserList
    @RequestMapping(value = "/{exhibitionId}/user", method = RequestMethod.GET)
    public List<UserObjectForExhibition> getUserList(@PathVariable int exhibitionId) throws SQLException {
        List<UserObjectForExhibition> listUser = new ArrayList<UserObjectForExhibition>();
        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        Statement stmt = conn.createStatement();
        ResultSet rs;
        try {

            rs = stmt.executeQuery("SELECT * FROM ticket WHERE exhibition_id = "+exhibitionId+" ");
            while (rs.next()) {
                String name = rs.getString("holder_name");
                String department = rs.getString("department");
                String registeredDate = rs.getString("registered_date");
                String email = rs.getString("email");
                String mobileNo = rs.getString("mobile_no");
                String holderRole = rs.getString("holder_role");
                String userId  = rs.getString("user_id");
                boolean reviewed = rs.getBoolean("reviewed");
                UserObjectForExhibition userObjectForExhibition = new UserObjectForExhibition();
                userObjectForExhibition.setRegisteredDate(registeredDate);
                userObjectForExhibition.setName(name);
                userObjectForExhibition.setId(userId);
                userObjectForExhibition.setEmail(email);
                userObjectForExhibition.setMonileNo(mobileNo);
                userObjectForExhibition.setHolderRole(holderRole);
                userObjectForExhibition.setDepartment(department);
                userObjectForExhibition.setReviewed(reviewed);
                listUser.add(userObjectForExhibition);
            }
            //conn.close();
        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        conn.close();
        return listUser;
    }


    //change banner
    @ResponseBody
    @RequestMapping(value = "/editBanner", method = RequestMethod.POST)
    public boolean changeBanner(@RequestBody UrlObject urlObject) throws Exception {
        //List<BannerObject> listBanner = new ArrayList<BannerObject>();


        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        Statement stmt = conn.createStatement();
        ResultSet rs;

        String newUrl = urlObject.getBannerUrl();
        int exhibitionId = urlObject.getExhibitionId();
        int bannerId = urlObject.getId();

        //get user id;
        try {
            PreparedStatement ps = conn.prepareStatement(
                    "UPDATE banner SET banner_url = ? ,exhibition_id = ? WHERE id = ? ");
            ps.setString(1,newUrl);
            ps.setInt(2,exhibitionId);
            ps.setInt(3,bannerId);
            ps.executeUpdate();


            //conn.close();
        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        conn.close();
        return true;
    }

    //Iterable
    //list All Exhibition
    @RequestMapping(value="/all",method= RequestMethod.GET)
    public @ResponseBody List<Exhibition> getAllExhibitions(@RequestHeader(required = false, value = "user_id") String user_id) throws SQLException {
        checkSize();
        int userId = 0;
        List<Integer> listExId = new ArrayList<Integer>();
        List<Exhibition> listEx = new ArrayList<Exhibition>();
        if(user_id==null) {
            //return exhibitionRepository.findAll();

            //test
            // url
            Connection conn = DriverManager.getConnection(url,"root","password");
            Statement stmt = conn.createStatement();
            ResultSet rs;
            try {
                rs = stmt.executeQuery("SELECT * FROM exhibition"+" ORDER BY is_expired ASC, start_date ASC ");
                while ( rs.next() ) {
                    //String lastName = rs.getString("name");
                    //System.out.println(lastName);
                    int id = rs.getInt("id");
                    String name = rs.getString("name");
                    String description = rs.getString("description");
                    String location = rs.getString("location");
                    String category = rs.getString("category");
                    String startDate = rs.getString("start_date");
                    String endDate = rs.getString("end_date");
                    String posterUrl = rs.getString("poster_url");
                    boolean isFavourited = rs.getBoolean("is_favourited");
                    Double latitude = rs.getDouble("latitude");
                    Double longtitude = rs.getDouble("longtitude");
                    String agendaUrl = rs.getString("agenda_url");
                    String mapUrl = rs.getString("map_url");
                    boolean isPassed = rs.getBoolean("is_expired");
                    String websiteUrl = rs.getString("website_url");
                    String preWebsiteText = rs.getString("custom_website_text");




                            Exhibition exhibition = new Exhibition(id, name, description, location, category, startDate, endDate, posterUrl, isFavourited, latitude
                                    , longtitude, agendaUrl, mapUrl, isPassed, websiteUrl,preWebsiteText);

                            listEx.add(exhibition);




                }
                //conn.close();
            }
            catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }
            conn.close();
            return listEx;
        }
        else{
            // url
            Connection conn = DriverManager.getConnection(url,"root","password");
            Statement stmt = conn.createStatement();
            ResultSet rs;

            //get user id;
            try {

                rs = stmt.executeQuery("SELECT * FROM user ");
                while (rs.next()) {
                    if (user_id.equalsIgnoreCase(rs.getString("user_id"))) {
                        userId = rs.getInt("id");
                    }
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }

            try {

                rs = stmt.executeQuery("SELECT * FROM user_and_exhibition WHERE user_id = "+userId+" ");
                while (rs.next()) {
                    int i = rs.getInt("exhibition_id");
                    listExId.add(i);
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }



                try {
                    rs = stmt.executeQuery("SELECT * FROM exhibition"+" ORDER BY is_expired ASC, start_date ASC ");
                    while ( rs.next() ) {
                        //String lastName = rs.getString("name");
                        //System.out.println(lastName);
                        int id = rs.getInt("id");
                        String name = rs.getString("name");
                        String description = rs.getString("description");
                        String location = rs.getString("location");
                        String category = rs.getString("category");
                        String startDate = rs.getString("start_date");
                        String endDate = rs.getString("end_date");
                        String posterUrl = rs.getString("poster_url");
                        boolean isFavourited = rs.getBoolean("is_favourited");
                        Double latitude = rs.getDouble("latitude");
                        Double longtitude = rs.getDouble("longtitude");
                        String agendaUrl = rs.getString("agenda_url");
                        String mapUrl = rs.getString("map_url");
                        boolean isPassed = rs.getBoolean("is_expired");
                        String websiteUrl = rs.getString("website_url");
                        String preWebsiteText = rs.getString("custom_website_text");

                        boolean mode = false;

                        for(int j = 0 ; j < listExId.size() ; j++){
                            int exIndex = listExId.get(j);
                            if(exIndex==id) {
                                Exhibition exhibition = new Exhibition(id, name, description, location, category, startDate, endDate, posterUrl, true, latitude
                                        , longtitude, agendaUrl, mapUrl, isPassed,websiteUrl,preWebsiteText);

                                listEx.add(exhibition);
                                mode = true;
                            }
                        }
                        if(mode!=true){
                            Exhibition exhibition = new Exhibition(id, name, description, location, category, startDate, endDate, posterUrl, isFavourited, latitude
                                    , longtitude, agendaUrl, mapUrl, isPassed,websiteUrl,preWebsiteText);

                            listEx.add(exhibition);
                        }
                    }
                    //conn.close();
                }
                catch (Exception e) {
                    System.err.println("Got an exception! ");
                    System.err.println(e.getMessage());
                }

            conn.close();
            return listEx;
        }
    }

    //get exhibition
    @RequestMapping(value = "/{exhibitionId}", method=RequestMethod.GET)
    public Exhibition getExhibition(@PathVariable int exhibitionId,@RequestHeader(required = false, value = "user_id") String user_id) throws SQLException {
        checkSize();
        //ExhibitionContactObject contact = new ExhibitionContactObject();
        OrganizerContact contactna = new OrganizerContact();
        BoothContactObject boothContactObject = new BoothContactObject();
        int userId = 0;
        List<Integer> listExId = new ArrayList<Integer>();
        if(user_id==null) {
            // url
            Connection conn = DriverManager.getConnection(url, "root", "password");
            Statement stmt2 = conn.createStatement();
            ResultSet abc;
            Exhibition exhibition = exhibitionRepository.findById(exhibitionId);
            abc = stmt2.executeQuery("SELECT * FROM exhibition_contact WHERE exhibition_id = "+exhibitionId+"");

            if(abc.next()){

                contactna.setName(abc.getString("name"));
                contactna.setLogoUrl(abc.getString("logo_url"));
                contactna.setDescription(abc.getString("description"));
                boothContactObject.setEmail(abc.getString("email"));
                boothContactObject.setFacebook(abc.getString("facebook"));
                boothContactObject.setFacebookUrl(abc.getString("facebook_url"));
                boothContactObject.setMobileNo(abc.getString("mobile_no"));
                contactna.setContact(boothContactObject);
                exhibition.setOrganizerContact(contactna);

            }

            //exhibition.setOrganizerContact(contact);
            if(exhibitionId==20){
                BoothCategory boothCategory = new BoothCategory();
                boothCategory.setList(departments);
                exhibition.setBoothCategory(boothCategory);
            }
            conn.close();
            return exhibition;
        }

        else {
            int contactStatus = 0;
            // url
            Connection conn = DriverManager.getConnection(url, "root", "password");
            Statement stmt = conn.createStatement();
            Statement stmt2 = conn.createStatement();
            ResultSet rs;
            ResultSet abc;

            abc = stmt2.executeQuery("SELECT * FROM exhibition_contact WHERE exhibition_id = "+exhibitionId+"");

            if(abc.next()){
                contactna.setName(abc.getString("name"));
                contactna.setLogoUrl(abc.getString("logo_url"));
                contactna.setDescription(abc.getString("description"));
                boothContactObject.setEmail(abc.getString("email"));
                boothContactObject.setFacebook(abc.getString("facebook"));
                boothContactObject.setFacebookUrl(abc.getString("facebook_url"));
                boothContactObject.setMobileNo(abc.getString("mobile_no"));
                contactna.setContact(boothContactObject);
                contactStatus =1;
            }

            //get user id;
            try {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET organizer_contact = ? WHERE id = ? ");
                ps.setObject(1,contactna);
                ps.setInt(2,exhibitionId);
                ps.executeUpdate();

                ////////////

                rs = stmt.executeQuery("SELECT * FROM user ");
                while (rs.next()) {
                    if (user_id.equalsIgnoreCase(rs.getString("user_id"))) {
                        userId = rs.getInt("id");
                    }
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }

            try {

                rs = stmt.executeQuery("SELECT * FROM user_and_exhibition WHERE user_id = " + userId + " ");
                while (rs.next()) {
                    int i = rs.getInt("exhibition_id");
                    listExId.add(i);
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }


            try {
                rs = stmt.executeQuery("SELECT * FROM exhibition WHERE  id = " + exhibitionId + "");
                while (rs.next()) {
                    //String lastName = rs.getString("name");
                    //System.out.println(lastName);
                    int id = rs.getInt("id");
                    String name = rs.getString("name");
                    String description = rs.getString("description");
                    String location = rs.getString("location");
                    String category = rs.getString("category");
                    String startDate = rs.getString("start_date");
                    String endDate = rs.getString("end_date");
                    String posterUrl = rs.getString("poster_url");
                    boolean isFavourited = rs.getBoolean("is_favourited");
                    Double latitude = rs.getDouble("latitude");
                    Double longtitude = rs.getDouble("longtitude");
                    String agendaUrl = rs.getString("agenda_url");
                    String mapUrl = rs.getString("map_url");
                    boolean isPassed = rs.getBoolean("is_expired");
                    String websiteUrl = rs.getString("website_url");
                    String preWebsiteText = rs.getString("custom_website_text");

                    boolean mode = false;

                    for (int j = 0; j < listExId.size(); j++) {
                        int exIndex = listExId.get(j);
                        if (exIndex == id) {
                            Exhibition exhibition = new Exhibition(id, name, description, location, category, startDate, endDate, posterUrl, true, latitude
                                    , longtitude, agendaUrl, mapUrl, isPassed,websiteUrl,preWebsiteText);
                            mode = true;
                            if(contactStatus==1) {
                                exhibition.setOrganizerContact(contactna);
                            }
                            if(exhibitionId==20){
                                BoothCategory boothCategory = new BoothCategory();
                                boothCategory.setList(departments);
                                exhibition.setBoothCategory(boothCategory);
                            }
                            return exhibition;
                        }
                    }
                    if (mode != true) {
                        Exhibition exhibition = new Exhibition(id, name, description, location, category, startDate, endDate, posterUrl, isFavourited, latitude
                                , longtitude, agendaUrl, mapUrl, isPassed,websiteUrl,preWebsiteText);
                        if(contactStatus==1) {
                            exhibition.setOrganizerContact(contactna);
                        }
                        if(exhibitionId==20){
                            BoothCategory boothCategory = new BoothCategory();
                            boothCategory.setList(departments);
                            exhibition.setBoothCategory(boothCategory);
                        }
                        conn.close();
                        return exhibition;
                    }
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }

            conn.close();
            return null;
        }
    }

    //save Exhibition fav
    @RequestMapping(value = "/{exhibitionId}/saveFavourited", method=RequestMethod.GET)
    @ResponseBody
    public SaveFavObject saveFavExhi(@RequestHeader(value="access_token") String tokenValue,@RequestHeader(value="user_id") String user_id, @PathVariable int exhibitionId, @RequestParam boolean favourited) throws SQLException, Exception {
        int id = 0;
        String userId = user_id;
        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        Statement stmt = conn.createStatement();
        ResultSet rs;
        if(favourited){
            if(checkToken(tokenValue,user_id)==true) {

                //check user is created?
                try {

                    rs = stmt.executeQuery("SELECT * FROM user ");
                    while (rs.next()) {
                        if (user_id.equalsIgnoreCase(rs.getString("user_id"))) {
                            id = rs.getInt("id");
                        }
                    }
                    //conn.close();
                } catch (Exception e) {
                    System.err.println("Got an exception! ");
                    System.err.println(e.getMessage());
                }

                //id not then create
                if (id == 0) {
                    String str = "INSERT INTO user (user_id)" +
                            "VALUES ('" + userId + "')";

                    try {
                        stmt.executeUpdate(str);
                        //conn.close();

                    } catch (Exception e) {
                        System.err.println("Got an exception! ");
                        System.err.println(e.getMessage());
                    }
                    rs = stmt.executeQuery("SELECT * FROM user ");
                    while (rs.next()) {
                        if (user_id.equalsIgnoreCase(rs.getString("user_id"))) {
                            id = rs.getInt("id");
                            System.out.println(id);
                        }
                    }
                }

                if(id!=0){
                    rs = stmt.executeQuery("SELECT * FROM user_and_exhibition WHERE user_id = "+id+"");
                    while (rs.next()) {
                        if (exhibitionId==(rs.getInt("exhibition_id"))) {
                            SaveFavObject saveFavObject = new SaveFavObject(true,"You already add this exhibition to your Favourite");
                            return saveFavObject;
                        }
                    }

                    System.out.println("Create at user_and_exhibition");
                    System.out.println(id);
                    String str = "INSERT INTO user_and_exhibition (user_id, exhibition_id)" +
                            "VALUES ('" + id + "', '"+exhibitionId+"')";

                    try {
                        stmt.executeUpdate(str);
                        conn.close();

                    } catch (Exception e) {
                        System.err.println("Got an exception! ");
                        System.err.println(e.getMessage());
                    }
                }
                SaveFavObject saveFavObject = new SaveFavObject(true,"Successfully add");
                conn.close();
                return saveFavObject;

            }
            else {
                SaveFavObject saveFavObject = new SaveFavObject(false,"Please login first");
                conn.close();
                return saveFavObject;
            }
        }
        else{
            if(checkToken(tokenValue,user_id)==true) {
                //check user is created?
                try {

                    rs = stmt.executeQuery("SELECT * FROM user ");
                    while (rs.next()) {
                        if (user_id.equalsIgnoreCase(rs.getString("user_id"))) {
                            id = rs.getInt("id");
                        }
                    }
                    //conn.close();
                } catch (Exception e) {
                    System.err.println("Got an exception! ");
                    System.err.println(e.getMessage());
                }

                //id not then create
                if (id == 0) {
                    SaveFavObject saveFavObject = new SaveFavObject(false,"Please login first");
                    return saveFavObject;
                }

                if(id!=0){
                    System.out.println("Create at user_and_exhibition");
                    System.out.println(id);
                    String str = "DELETE FROM user_and_exhibition WHERE user_id = "+id+" AND exhibition_id = "+exhibitionId+"";

                    try {
                        stmt.executeUpdate(str);
                        conn.close();

                    } catch (Exception e) {
                        System.err.println("Got an exception! ");
                        System.err.println(e.getMessage());
                    }
                }
                SaveFavObject saveFavObject = new SaveFavObject(true,"Successfully Unsave");
                conn.close();
                return saveFavObject;

            }
            else {
                SaveFavObject saveFavObject = new SaveFavObject(false,"Please login first");
                conn.close();
                return saveFavObject;
            }
        }


    }



    //get fav ex
    @RequestMapping(value="/favEx",method= RequestMethod.GET)
    public @ResponseBody List<Exhibition> getFavExhibitions(@RequestHeader(value="access_token") String tokenValue,@RequestHeader(value="user_id") String user_id) throws Exception {
        // url
        Connection conn = DriverManager.getConnection(url, "root", "password");
        Statement stmt = conn.createStatement();
        ResultSet rs;
        int userId = 0;
        List<Integer> listExId= new ArrayList<Integer>();


        List<Exhibition> listEx= new ArrayList<Exhibition>();
        if(checkToken(tokenValue,user_id)==true) {
            try {

                rs = stmt.executeQuery("SELECT * FROM user ");
                while (rs.next()) {
                    if (user_id.equalsIgnoreCase(rs.getString("user_id"))) {
                        userId = rs.getInt("id");
                    }
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }

            try {

                rs = stmt.executeQuery("SELECT * FROM user_and_exhibition WHERE user_id = "+userId+" ");
                while (rs.next()) {
                    int i = rs.getInt("exhibition_id");
                    listExId.add(i);
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }

            for(int j = 0; j< listExId.size() ; j++){
                int exIndex = listExId.get(j);
                try {
                    rs = stmt.executeQuery("SELECT * FROM exhibition WHERE id = "+exIndex+" "+" ORDER BY start_date ASC");
                    while ( rs.next() ) {
                        //String lastName = rs.getString("name");
                        //System.out.println(lastName);
                        int id = rs.getInt("id");
                        String name = rs.getString("name");
                        String description = rs.getString("description");
                        String location = rs.getString("location");
                        String category = rs.getString("category");
                        String startDate = rs.getString("start_date");
                        String endDate = rs.getString("end_date");
                        String posterUrl = rs.getString("poster_url");
                        boolean isFavourited = rs.getBoolean("is_favourited");
                        Double latitude = rs.getDouble("latitude");
                        Double longtitude = rs.getDouble("longtitude");
                        String agendaUrl = rs.getString("agenda_url");
                        String mapUrl = rs.getString("map_url");
                        boolean isPassed = rs.getBoolean("is_expired");
                        String websiteUrl = rs.getString("website_url");
                        String preWebsiteText = rs.getString("custom_website_text");

                        Exhibition exhibition = new Exhibition(id,name,description,location,category,startDate,endDate,posterUrl,true,latitude
                                ,longtitude,agendaUrl,mapUrl,isPassed,websiteUrl,preWebsiteText);

                        listEx.add(exhibition);
                    }
                    //conn.close();
                }
                catch (Exception e) {
                    System.err.println("Got an exception! ");
                    System.err.println(e.getMessage());
                }
            }


            conn.close();
            return listEx;
        }
        else {
            return listEx;
        }

    }

    //register and get ticket
    @RequestMapping(value = "/{exhibitionId}/register", method=RequestMethod.POST)
    @ResponseBody
    public ReturnRegister getTicket(@RequestHeader(value="access_token") String tokenValue,@RequestHeader(value="user_id") String user_id, @PathVariable int exhibitionId,@RequestBody TicketObject ticket) throws SQLException, Exception {

        //get date
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate localDate = LocalDate.now();
        String currentDate = dtf.format(localDate);
        System.out.println(currentDate);

        int id = 0;
        String userId = user_id;
        String userName = null;
        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        Statement stmt = conn.createStatement();
        ResultSet rs;
        ResultSet abc;
        List<Integer> listOfTicketId = new ArrayList<Integer>();
        int ticketId = 0;

        String holderName = ticket.getName();
        String holderRole = ticket.getHolderRole();
        String department = ticket.getDepartment();
        String email = ticket.getEmail();
        String mobileNo = ticket.getMobileNo();

        //exhibitiondetail
        String exhibitionName = exhibitionRepository.findById(exhibitionId).getName();
        String startDate = exhibitionRepository.findById(exhibitionId).getStartDate();
        String endDate = exhibitionRepository.findById(exhibitionId).getEndDate();


        if(checkToken(tokenValue,user_id)==true) {
                                                //check ticket is created?
            //get userid
            try {
                //get user id;
                rs = stmt.executeQuery("SELECT * FROM user ");
                while (rs.next()) {
                    if (user_id.equalsIgnoreCase(rs.getString("user_id"))) {
                        id = rs.getInt("id");
                        userName = rs.getString("name");

                    }
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }

            //get list of ticket id
            try {
                //get user id;
                rs = stmt.executeQuery("SELECT * FROM user_and_ticket");
                System.out.println("check check");
                //ถ้ายังไม่มี สร้างตั๋วมาใหม่
                if(rs.next()==false){
                    System.out.println("Test noi di");
                    String insertTicket = "INSERT INTO ticket (exhibition_name, user_id, start_date, end_date, holder_name, exhibition_id, department, registered_date, holder_role, email, mobile_no)" +
                            "VALUES (?,?,?,?,?,?,?,?,?,?,?)";

                    try {
                        PreparedStatement ps = conn.prepareStatement(insertTicket,Statement.RETURN_GENERATED_KEYS);
                        ps.setString(1,exhibitionName);
                        ps.setString(2,userId);
                        ps.setString(3,startDate);
                        ps.setString(4,endDate);
                        ps.setString(5,holderName);
                        ps.setInt(6,exhibitionId);
                        ps.setString(7,department);
                        ps.setString(8,currentDate);
                        ps.setString(9,holderRole);
                        ps.setString(10,email);
                        ps.setString(11,mobileNo);
                        ps.executeUpdate();
                        ResultSet rsd = ps.getGeneratedKeys();
                        if ( rsd.next() ) {
                            ticketId = rsd.getInt(1);
                            System.out.println("tick Id"+ticketId);
                        }
                        //conn.close();

                    }
                    catch (Exception e) {
                        System.err.println("Got an exception! ");
                        System.err.println(e.getMessage());
                    }


                    //add to user and ticket
                    String insertUserAndTicket = "INSERT INTO user_and_ticket (user_id, ticket_id)" +
                            "VALUES (?,?)";

                    try {
                        PreparedStatement ps = conn.prepareStatement(insertUserAndTicket);
                        ps.setInt(1,id);
                        ps.setInt(2,ticketId);

                        ps.executeUpdate();
                        //conn.close();

                    }
                    catch (Exception e) {
                        System.err.println("Got an exception! ");
                        System.err.println(e.getMessage());
                    }

                    ReturnRegister reOb = new ReturnRegister(true,"You have successfully registered to "+exhibitionName+" You can check your ticket out on your ticket page. See you there!");
                    conn.close();
                    return reOb;
                }
                //ถ้ามีในตาราง user ticket แล้ว ต้องเชคว่าที่มีอะ ใช่ที่สมัครไปยัง
                else{
                    System.out.println("check check2");
                    rs = stmt.executeQuery("SELECT * FROM user_and_ticket WHERE  user_id = "+id+"");
                    while (rs.next()) {
                        System.out.println("while loop for add list id");

                        listOfTicketId.add(rs.getInt("ticket_id"));

                    }

                    //เอาลิสของ id ตั๋ว ที่มีมาเชค
                    for(int k = 0 ; k < listOfTicketId.size() ; k++){
                       int tickId = listOfTicketId.get(k);

                        rs = stmt.executeQuery("SELECT * FROM ticket WHERE  id = "+tickId+"");
                        while(rs.next()){
                            //ถ้าลงทะเบียนไปแล้ว
                            if(rs.getInt("exhibition_id")==exhibitionId){
                                ticketId = rs.getInt("id");
                                ReturnRegister reOb = new ReturnRegister(false,"You already register to this exhibition");
                                return reOb;
                            }
                        }
                    }
                    //ถ้า user ยังไม่มีตั๋วของงานนี้ สร้างใหม่
                    String insertTicket = "INSERT INTO ticket (exhibition_name, user_id, start_date, end_date, holder_name, exhibition_id, department, registered_date, holder_role, email, mobile_no)" +
                            "VALUES (?,?,?,?,?,?,?,?,?,?,?)";

                    try {
                        PreparedStatement ps = conn.prepareStatement(insertTicket,Statement.RETURN_GENERATED_KEYS);
                        ps.setString(1,exhibitionName);
                        ps.setString(2,userId);
                        ps.setString(3,startDate);
                        ps.setString(4,endDate);
                        ps.setString(5,holderName);
                        ps.setInt(6,exhibitionId);
                        ps.setString(7,department);
                        ps.setString(8,currentDate);
                        ps.setString(9,holderRole);
                        ps.setString(10,email);
                        ps.setString(11,mobileNo);
                        ps.executeUpdate();
                        ResultSet rsd = ps.getGeneratedKeys();
                        if ( rsd.next() ) {
                            ticketId = rsd.getInt(1);
                            System.out.println("tick Id"+ticketId);
                        }
                        //conn.close();

                    }
                    catch (Exception e) {
                        System.err.println("Got an exception! ");
                        System.err.println(e.getMessage());
                    }


                    //add to user and ticket
                    String insertUserAndTicket = "INSERT INTO user_and_ticket (user_id, ticket_id)" +
                            "VALUES (?,?)";

                    try {
                        PreparedStatement ps = conn.prepareStatement(insertUserAndTicket);
                        ps.setInt(1,id);
                        ps.setInt(2,ticketId);

                        ps.executeUpdate();
                        //conn.close();

                    }
                    catch (Exception e) {
                        System.err.println("Got an exception! ");
                        System.err.println(e.getMessage());
                    }

                    ReturnRegister reOb = new ReturnRegister(true,"You have successfully registered to "+exhibitionName+" You can check your ticket out on your ticket page. See you there!");
                    return reOb;

                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }
            ReturnRegister reOb = new ReturnRegister(false,"Can not Register!");
            conn.close();
            return reOb;


        }
        else {
            ReturnRegister reOb = new ReturnRegister(false,"Can not Register!, You do not have permission");
            conn.close();
            return reOb;
        }
    }


    //get booths
    @RequestMapping(value="/{exhibitionId}/booths",method= RequestMethod.GET)
    public @ResponseBody List<Booth> getAllBooths(@PathVariable int exhibitionId) throws SQLException {

        List<Booth> listBooth = new ArrayList<Booth>();
        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        Statement stmt = conn.createStatement();
        Statement stmt2 = conn.createStatement();
        ResultSet rs;
        ResultSet abc;
        String email = null;
        String facebook = null;
        String facebookUrl = null;
        String mobileNo = null;

        try {
            PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM booth WHERE exhibition_id = ? "+" ORDER BY booth_code ASC");
            pstmt.setInt(1,exhibitionId);
            rs = pstmt.executeQuery();
            //rs = stmt.executeQuery("SELECT * FROM booth WHERE exhibition_id = "+exhibitionId+" "+" ORDER BY booth_code ASC");
            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                String description = rs.getString("description");
                String boothCode = rs.getString("booth_code");
                int exId = rs.getInt("exhibition_id");
                String logoUrl = rs.getString("logo_url");
                String brochureUrl = rs.getString("brochure_url");
                String keyword = rs.getString("keywords");
                ////////////
                BoothContactObject contact = new BoothContactObject();
                abc = stmt2.executeQuery("SELECT * FROM booth_contact WHERE booth_id = "+id+"");

                Booth newbooth = new Booth(id,name,description,boothCode,exId,logoUrl,brochureUrl);
                if(abc.next()){
                    contact.setEmail(abc.getString("email"));
                    contact.setFacebook(abc.getString("facebook"));
                    contact.setFacebookUrl(abc.getString("facebook_url"));
                    contact.setMobileNo(abc.getString("mobile_no"));

                }
                /*PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth SET contact = ? WHERE id = ? ");
                ps.setObject(1,contact);
                ps.setInt(2,id);
                ps.executeUpdate();
                */
                ////////////


                newbooth.setContact(contact);
                newbooth.setKeywords(keyword);
                listBooth.add(newbooth);
            }
            //conn.close();
        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        conn.close();
        return listBooth;
        //return boothRepository.findBoothByExhibitionId(exhibitionId);
    }

    //get booth by category
    @RequestMapping(value="/{exhibitionId}/booths/category",method= RequestMethod.GET)
    public @ResponseBody List<Booth> getBoothsByDepartment(@PathVariable int exhibitionId,@RequestParam("category") String departmentna) throws SQLException {
        String department = departmentna;
        List<Booth> listBooth = new ArrayList<Booth>();
        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        Statement stmt = conn.createStatement();
        Statement stmt2 = conn.createStatement();
        ResultSet rs;
        ResultSet abc;
        List<Integer> listBoothId = new ArrayList<Integer>();

        if(departmentna.equals("All")) {
            return getAllBooths(exhibitionId);
        }

        try {
            PreparedStatement pstmt1 = conn.prepareStatement("SELECT * FROM booth WHERE exhibition_id = ? "+" ORDER BY booth_code ASC");
            pstmt1.setInt(1,exhibitionId);
            rs = pstmt1.executeQuery();
            //rs = stmt.executeQuery("SELECT * FROM booth WHERE exhibition_id = "+exhibitionId+" "+" ORDER BY booth_code ASC");
            while (rs.next()) {
                if (rs.getString("description").toLowerCase().indexOf(department.toLowerCase())!=-1) {
                    listBoothId.add(rs.getInt("id"));
                }
            }
            //conn.close();
        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }

        for(int i = 0 ; i<listBoothId.size() ; i++){
            int boothId = listBoothId.get(i);
            try {
                PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM booth WHERE id = ? "+" ORDER BY booth_code ASC");
                pstmt.setInt(1,boothId);
                rs = pstmt.executeQuery();
                //rs = stmt.executeQuery("SELECT * FROM booth WHERE exhibition_id = "+exhibitionId+" "+" ORDER BY booth_code ASC");
                while (rs.next()) {
                    int id = rs.getInt("id");
                    String name = rs.getString("name");
                    String description = rs.getString("description");
                    String boothCode = rs.getString("booth_code");
                    int exId = rs.getInt("exhibition_id");
                    String logoUrl = rs.getString("logo_url");
                    String brochureUrl = rs.getString("brochure_url");
                    String keyword = rs.getString("keywords");
                    ////////////
                    BoothContactObject contact = new BoothContactObject();
                    abc = stmt2.executeQuery("SELECT * FROM booth_contact WHERE booth_id = "+id+"");

                    if(abc.next()){
                        contact.setEmail(abc.getString("email"));
                        contact.setFacebook(abc.getString("facebook"));
                        contact.setFacebookUrl(abc.getString("facebook_url"));
                        contact.setMobileNo(abc.getString("mobile_no"));
                    }
                    //PreparedStatement ps = conn.prepareStatement(
                    //       "UPDATE booth SET contact = ? WHERE id = ? ");
                    //ps.setObject(1,contact);
                    //ps.setInt(2,id);
                    //ps.executeUpdate();

                    ////////////

                    Booth newbooth = new Booth(id,name,description,boothCode,exId,logoUrl,brochureUrl);
                    newbooth.setContact(contact);
                    newbooth.setKeywords(keyword);
                    listBooth.add(newbooth);
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }
        }
        conn.close();
        return listBooth;
        //return boothRepository.findBoothByExhibitionId(exhibitionId);
    }

    //search booth by keyword
    @RequestMapping(value="/{exhibitionId}/booths/search",method= RequestMethod.GET)
    public @ResponseBody List<Booth> getBoothsByKeyword(@PathVariable int exhibitionId,@RequestParam("keyword") String keyword) throws SQLException {
        String keywordna = keyword;
        List<Booth> listBooth = new ArrayList<Booth>();
        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        Statement stmt = conn.createStatement();
        Statement stmt2 = conn.createStatement();
        ResultSet rs;
        ResultSet abc;
        List<Integer> listBoothId = new ArrayList<Integer>();

        try {

            PreparedStatement pstmt1 = conn.prepareStatement("SELECT * FROM booth WHERE exhibition_id = ? "+" ORDER BY booth_code ASC");
            pstmt1.setInt(1,exhibitionId);
            rs = pstmt1.executeQuery();

            //rs = stmt.executeQuery("SELECT * FROM booth WHERE exhibition_id = "+exhibitionId+" "+" ORDER BY booth_code ASC");
            while (rs.next()) {

                if(rs.getString("keywords")==null){

                }
                else if (rs.getString("keywords").toLowerCase().indexOf(keywordna.toLowerCase())!=-1) {
                    listBoothId.add(rs.getInt("id"));
                }
                else if (rs.getString("name").toLowerCase().indexOf(keywordna.toLowerCase())!=-1) {
                    listBoothId.add(rs.getInt("id"));
                    System.out.println("hihi");
                }
            }
            //conn.close();
        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }

        for(int i = 0 ; i<listBoothId.size() ; i++){
            int boothId = listBoothId.get(i);
            try {
                PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM booth WHERE id = ? "+" ORDER BY booth_code ASC");
                pstmt.setInt(1,boothId);
                rs = pstmt.executeQuery();
                //rs = stmt.executeQuery("SELECT * FROM booth WHERE exhibition_id = "+exhibitionId+" "+" ORDER BY booth_code ASC");
                while (rs.next()) {
                    int id = rs.getInt("id");
                    String name = rs.getString("name");
                    String description = rs.getString("description");
                    String boothCode = rs.getString("booth_code");
                    int exId = rs.getInt("exhibition_id");
                    String logoUrl = rs.getString("logo_url");
                    String brochureUrl = rs.getString("brochure_url");
                    String keyword3 = rs.getString("keywords");
                    ////////////
                    BoothContactObject contact = new BoothContactObject();
                    abc = stmt2.executeQuery("SELECT * FROM booth_contact WHERE booth_id = "+id+"");

                    if(abc.next()){
                        contact.setEmail(abc.getString("email"));
                        contact.setFacebook(abc.getString("facebook"));
                        contact.setFacebookUrl(abc.getString("facebook_url"));
                        contact.setMobileNo(abc.getString("mobile_no"));
                    }
                    //PreparedStatement ps = conn.prepareStatement(
                    //       "UPDATE booth SET contact = ? WHERE id = ? ");
                    //ps.setObject(1,contact);
                    //ps.setInt(2,id);
                    //ps.executeUpdate();

                    ////////////

                    Booth newbooth = new Booth(id,name,description,boothCode,exId,logoUrl,brochureUrl);
                    newbooth.setContact(contact);
                    newbooth.setKeywords(keyword3);
                    listBooth.add(newbooth);
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }
        }
        conn.close();
        return listBooth;
        //return boothRepository.findBoothByExhibitionId(exhibitionId);
    }

    //Filter By category
    @RequestMapping(value="/category/{category}",method = RequestMethod.GET)
    @ResponseBody
    public List<Exhibition> filterByCategory(@PathVariable String category,@RequestHeader(required = false, value = "user_id") String user_id) throws SQLException {
        if(user_id==null){
            return exhibitionRepository.findByCategory(category);
        }
        else{
            checkSize();
            int userId = 0;
            List<Integer> listExId = new ArrayList<Integer>();
            List<Exhibition> listEx = new ArrayList<Exhibition>();
            List<Integer> listFaveId = new ArrayList<Integer>();
            // url
            Connection conn = DriverManager.getConnection(url,"root","password");
            Statement stmt = conn.createStatement();
            ResultSet rs;

            try {

                rs = stmt.executeQuery("SELECT * FROM user ");
                while (rs.next()) {
                    if (user_id.equalsIgnoreCase(rs.getString("user_id"))) {
                        userId = rs.getInt("id");
                    }
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }

            try {

                rs = stmt.executeQuery("SELECT * FROM user_and_exhibition WHERE user_id = " + userId + " ");
                while (rs.next()) {
                    int i = rs.getInt("exhibition_id");
                    listFaveId.add(i);
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }



        //search
        try {
            rs = stmt.executeQuery("SELECT * FROM exhibition ");
            while (rs.next()) {
                //if (search.equalsIgnoreCase(rs.getString("name"))) {
                if (rs.getString("category").toLowerCase().indexOf(category.toLowerCase())!=-1) {
                    //System.out.println("1");
                    listExId.add(rs.getInt("id"));
                }
            }
            //conn.close();
        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }

        // i มันไม่ใช่
        for(int i = 0 ; i<listExId.size() ; i++){
            int exId = listExId.get(i);
            rs = stmt.executeQuery("SELECT * FROM exhibition WHERE id = "+exId+"");
            while(rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                String description = rs.getString("description");
                String location = rs.getString("location");
                String categoryName = rs.getString("category");
                String startDate = rs.getString("start_date");
                String endDate = rs.getString("end_date");
                String posterUrl = rs.getString("poster_url");
                boolean isFavourited = rs.getBoolean("is_favourited");
                Double latitude = rs.getDouble("latitude");
                Double longtitude = rs.getDouble("longtitude");
                String agendaUrl = rs.getString("agenda_url");
                String mapUrl = rs.getString("map_url");
                boolean isPassed = rs.getBoolean("is_expired");
                String websiteUrl = rs.getString("website_url");
                String preWebsiteText = rs.getString("custom_website_text");

                if(user_id==null) {
                    Exhibition exhibition = new Exhibition(id, name, description, location, categoryName, startDate, endDate, posterUrl, isFavourited, latitude
                            , longtitude, agendaUrl, mapUrl, isPassed,websiteUrl,preWebsiteText);

                    listEx.add(exhibition);
                }
                else{
                    boolean mode = false;

                    for(int j = 0 ; j < listFaveId.size() ; j++){
                        int exIndex = listFaveId.get(j);
                        if(exIndex==id) {
                            Exhibition exhibition = new Exhibition(id, name, description, location, categoryName, startDate, endDate, posterUrl, true, latitude
                                    , longtitude, agendaUrl, mapUrl, isPassed,websiteUrl,preWebsiteText);

                            listEx.add(exhibition);
                            mode = true;
                        }
                    }
                    if(mode!=true){
                        Exhibition exhibition = new Exhibition(id, name, description, location, categoryName, startDate, endDate, posterUrl, isFavourited, latitude
                                , longtitude, agendaUrl, mapUrl, isPassed,websiteUrl,preWebsiteText);

                        listEx.add(exhibition);
                    }
                }
            }

        }
        conn.close();
        return listEx;

    }


    }

    //List of Category
    @RequestMapping(value="/categories",method= RequestMethod.GET)
    public @ResponseBody List<String> getAllCategories() {

        return categories;
    }

    //List of Departments
    @RequestMapping(value="/{exhibitionId}/departments",method= RequestMethod.GET)
    public @ResponseBody List<String> getAllDepartments(@PathVariable int exhibitionId) {

        return departments;
    }


    //Get booth
    @RequestMapping(value="/{exhibitionId}/booths/{boothId}",method= RequestMethod.GET)
    public @ResponseBody Booth getBooth(@PathVariable int boothId) throws SQLException {

        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        Statement stmt = conn.createStatement();
        Statement stmt2 = conn.createStatement();
        ResultSet rs;
        ResultSet abc;
        String email = null;
        String facebook = null;
        String facebookUrl = null;
        String mobileNo = null;

        try {
            PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM booth WHERE id = ? ");
            pstmt.setInt(1,boothId);
            rs = pstmt.executeQuery();
            //rs = stmt.executeQuery("SELECT * FROM booth WHERE exhibition_id = "+exhibitionId+" "+" ORDER BY booth_code ASC");
            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                String description = rs.getString("description");
                String boothCode = rs.getString("booth_code");
                int exId = rs.getInt("exhibition_id");
                String logoUrl = rs.getString("logo_url");
                String brochureUrl = rs.getString("brochure_url");
                String keyword = rs.getString("keywords");
                ////////////
                BoothContactObject contact = new BoothContactObject();

                PreparedStatement pstmt2 = conn.prepareStatement("SELECT * FROM booth_contact WHERE booth_id = ? ");
                pstmt2.setInt(1,boothId);
                abc = pstmt2.executeQuery();

                Booth newbooth = new Booth(id,name,description,boothCode,exId,logoUrl,brochureUrl);
                if(abc.next()){
                    contact.setEmail(abc.getString("email"));
                    contact.setFacebook(abc.getString("facebook"));
                    contact.setFacebookUrl(abc.getString("facebook_url"));
                    contact.setMobileNo(abc.getString("mobile_no"));

                }
                /*PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth SET contact = ? WHERE id = ? ");
                ps.setObject(1,contact);
                ps.setInt(2,id);
                ps.executeUpdate();
                */
                ////////////


                newbooth.setContact(contact);
                newbooth.setKeywords(keyword);
                conn.close();
                return newbooth;
            }
            //conn.close();
        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        return null;
        //return boothRepository.findBoothByExhibitionId(exhibitionId);
    }

    //Save e-bro
    @RequestMapping(value="/{exhibitionId}/booths/{boothId}/save",method= RequestMethod.POST)
    public @ResponseBody Booth saveEBro(@PathVariable int boothId, int exhibitionId){
        // This returns a JSON or XML with the users

        String brochureUrl = boothRepository.findBoothById(boothId).getBrochureUrl();
        System.out.println(exhibitionId);
        return boothRepository.findBoothById(boothId);


    }


    //get all latest Exhibition
    @RequestMapping(value="/latest",method = RequestMethod.GET)
    @ResponseBody
    public List<Exhibition> getUnPassExhibition() throws SQLException {
        checkSize();
        List<Exhibition> listEx= new ArrayList<Exhibition>();
        try {
            // url
            Connection conn = DriverManager.getConnection(url,"root","password");
            Statement stmt = conn.createStatement();
            ResultSet rs;


            rs = stmt.executeQuery("SELECT * FROM exhibition WHERE is_expired = false "+" ORDER BY start_date ASC");
            while ( rs.next() ) {
                //String lastName = rs.getString("name");
                //System.out.println(lastName);
                int id = rs.getInt("id");
                String name = rs.getString("name");
                String description = rs.getString("description");
                String location = rs.getString("location");
                String category = rs.getString("category");
                String startDate = rs.getString("start_date");
                String endDate = rs.getString("end_date");
                String posterUrl = rs.getString("poster_url");
                boolean isFavourited = rs.getBoolean("is_favourited");
                Double latitude = rs.getDouble("latitude");
                Double longtitude = rs.getDouble("longtitude");
                String agendaUrl = rs.getString("agenda_url");
                String mapUrl = rs.getString("map_url");
                boolean isPassed = rs.getBoolean("is_expired");
                String websiteUrl = rs.getString("website_url");
                String preWebsiteText = rs.getString("custom_website_text");

                Exhibition exhibition = new Exhibition(id,name,description,location,category,startDate,endDate,posterUrl,isFavourited,latitude
                ,longtitude,agendaUrl,mapUrl,isPassed,websiteUrl,preWebsiteText);

                listEx.add(exhibition);
            }
            conn.close();
            }
            catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        //conn.close();
        return listEx;


    }


    //add exhibition
    @ResponseBody
    @RequestMapping(value="/add",method= RequestMethod.POST)
    public void addExhibition(@RequestBody ExhibitionObject jason) throws SQLException {
        // url
        Connection conn = DriverManager.getConnection(url, "root", "password");
        String name = jason.getName();
        String description = jason.getDescription();
        String location = jason.getLocation();
        String category = jason.getCategory();
        String startDate = jason.getStartDate();
        String endDate = jason.getEndDate();
        String posterUrl = jason.getPosterUrl();
        Double latitude = jason.getLatitude();
        String websiteUrl = jason.getWebsiteUrl();
        String preWebsiteText = jason.getCustomWebsiteText();
        String reviewUrl = jason.getReviewUrl();
        String organizerName = jason.getOrganizerName();
        String organizerDetail = jason.getOrganizerDetail();
        String organizerLogoUrl = jason.getOrganizerLogoUrl();
        String email = jason.getEmail();
        String facebook = jason.getFacebook();
        String facebookUrl = jason.getFacebookUrl();
        String mobileNo = jason.getMobileNo();

        int exhibitionId = -1;


        if(latitude==null){
            latitude = 13.764936;
        }
        Double longtitude = jason.getLongtitude();
        if(longtitude==null){
            longtitude = 100.538297;
        }
        String agendaUrl = jason.getAgendaUrl();
        String mapUrl = jason.getMapUrl();

        String insertEx = "INSERT INTO exhibition (name, description, location, category, start_date, end_date, poster_url, latitude, longtitude, agenda_url, map_url, website_url, custom_website_text,review_url )" +
                "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

        try {
            PreparedStatement ps = conn.prepareStatement(insertEx,Statement.RETURN_GENERATED_KEYS);
            ps.setString(1,name);
            ps.setString(2,description);
            ps.setString(3,location);
            ps.setString(4,category);
            ps.setString(5,startDate);
            ps.setString(6,endDate);
            ps.setString(7,posterUrl);
            ps.setDouble(8,latitude);
            ps.setDouble(9,longtitude);
            ps.setString(10,agendaUrl);
            ps.setString(11,mapUrl);
            ps.setString(12,websiteUrl);
            ps.setString(13,preWebsiteText);
            ps.setString(14,reviewUrl);
            ps.executeUpdate();
            ResultSet rsd = ps.getGeneratedKeys();
            if ( rsd.next() ) {
                exhibitionId = rsd.getInt(1);
            }
            //conn.close();

        }
        catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }

        String insertExContact = "INSERT INTO exhibition_contact (name, description, logo_url, email, facebook, facebook_url, mobile_no, exhibition_id)" +
                "VALUES (?,?,?,?,?,?,?,?)";
        try {
            PreparedStatement ps1 = conn.prepareStatement(insertExContact);
            ps1.setString(1,organizerName);
            ps1.setString(2,organizerDetail);
            ps1.setString(3,organizerLogoUrl);
            ps1.setString(4,email);
            ps1.setString(5,facebook);
            ps1.setString(6,facebookUrl);
            ps1.setString(7,mobileNo);
            ps1.setInt(8,exhibitionId);
            ps1.executeUpdate();

            /*PreparedStatement ps = conn.prepareStatement(
                    "UPDATE exhibition SET organizer_contact = ? WHERE id = ? ");
            ps.setObject(1,contact);
            ps.setInt(2,exhibitionId);
            ps.executeUpdate();*/
        }
        catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        conn.close();
    }

    //add booth
    @ResponseBody
    @RequestMapping(value="/{exId}/booths/add",method= RequestMethod.POST)
    public void addBooth(@RequestBody BoothObject jason, @PathVariable int exId) throws SQLException {
        String name = jason.getName();
        String boothCode = jason.getBoothCode();
        String description = jason.getDescription();
        int exhibitionId = exId;
        String logoUrl = jason.getLogoUrl();
        String brochureUrl = jason.getBrochureUrl();
        String email = jason.getEmail();
        String facebook = jason.getFacebook();
        String facebookUrl = jason.getFacebookUrl();
        String mobileNo = jason.getMobileNo();
        String keyword = jason.getKeywords();
        int boothId = -1;

        // url
        Connection conn = DriverManager.getConnection(url, "root", "password");
        /*String str = "INSERT INTO booth (name, booth_code, description, exhibition_id, logo_url, brochure_url)" +
                "VALUES ('"+name+"', '"+boothCode+"', '"+description+"', '"+exhibitionId+"', '"+logoUrl+"', '"+brochureUrl+"')";*/

        String insertBooth = "INSERT INTO booth"
                + "(name, booth_code, description, exhibition_id, logo_url, brochure_url, keywords) VALUES"
                + "(?,?,?,?,?,?,?)";

        try {
            /*Statement stmt = conn.createStatement();
            stmt.executeUpdate(str);*/
            PreparedStatement ps = conn.prepareStatement(insertBooth,Statement.RETURN_GENERATED_KEYS);
            ps.setString(1,name);
            ps.setString(2,boothCode);
            ps.setString(3,description);
            ps.setInt(4,exhibitionId);
            ps.setString(5,logoUrl);
            ps.setString(6,brochureUrl);
            ps.setString(7,keyword);
            ps.executeUpdate();
            ResultSet rsd = ps.getGeneratedKeys();
            if ( rsd.next() ) {
                boothId = rsd.getInt(1);
            }
            //conn.close();

        }
        catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }

        String insertExContact = "INSERT INTO booth_contact (email, facebook, facebook_url, mobile_no, booth_id)" +
                "VALUES (?,?,?,?,?)";
        try {
            PreparedStatement ps1 = conn.prepareStatement(insertExContact);
            ps1.setString(1,email);
            ps1.setString(2,facebook);
            ps1.setString(3,facebookUrl);
            ps1.setString(4,mobileNo);
            ps1.setInt(5,boothId);
            ps1.executeUpdate();

            /*PreparedStatement ps = conn.prepareStatement(
                    "UPDATE exhibition SET organizer_contact = ? WHERE id = ? ");
            ps.setObject(1,contact);
            ps.setInt(2,exhibitionId);
            ps.executeUpdate();*/
        }
        catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        conn.close();
    }

    //Update exhibiiton
    @ResponseBody
    @RequestMapping(value="/{exhibitionId}/update",method= RequestMethod.POST)
    public void saveData(@RequestBody ExhibitionObject jason, @PathVariable int exhibitionId) throws SQLException {
        int id = exhibitionId;
        String name = jason.getName();
        String description = jason.getDescription();
        String location = jason.getLocation();
        String category = jason.getCategory();
        String startDate = jason.getStartDate();
        String endDate = jason.getEndDate();
        String posterUrl = jason.getPosterUrl();
        Double latitude = jason.getLatitude();
        Double longtitude = jason.getLongtitude();
        String agendaUrl = jason.getAgendaUrl();
        String mapUrl = jason.getMapUrl();
        String websiteUrl = jason.getWebsiteUrl();
        String preWebsiteText = jason.getCustomWebsiteText();
        String reviewUrl = jason.getReviewUrl();
        String organizerName = jason.getOrganizerName();
        String organizerDetail = jason.getOrganizerDetail();
        String organizerLogoUrl = jason.getOrganizerLogoUrl();
        String email = jason.getEmail();
        String facebook = jason.getFacebook();
        String facebookUrl = jason.getFacebookUrl();
        String mobileNo = jason.getMobileNo();

        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        if(organizerName!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition_contact SET name = ? WHERE exhibition_id = ? ");
                ps.setString(1,organizerName);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(organizerDetail!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition_contact SET description = ? WHERE exhibition_id = ? ");
                ps.setString(1,organizerDetail);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(organizerLogoUrl!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition_contact SET logo_url = ? WHERE exhibition_id = ? ");
                ps.setString(1,organizerLogoUrl);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(email!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition_contact SET email = ? WHERE exhibition_id = ? ");
                ps.setString(1,email);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(facebook!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition_contact SET facebook = ? WHERE exhibition_id = ? ");
                ps.setString(1,facebook);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(facebookUrl!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition_contact SET facebook_url = ? WHERE exhibition_id = ? ");
                ps.setString(1,facebookUrl);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(mobileNo!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition_contact SET mobile_no = ? WHERE exhibition_id = ? ");
                ps.setString(1,mobileNo);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(name!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET name = ? WHERE id = ? ");
                ps.setString(1,name);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(location!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET location = ? WHERE id = ? ");
                ps.setString(1,location);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(category!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET category = ? WHERE id = ? ");
                ps.setString(1,category);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(startDate!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET start_date = ? WHERE id = ? ");
                ps.setString(1,startDate);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(endDate!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET end_date = ? WHERE id = ? ");
                ps.setString(1,endDate);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(posterUrl!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET poster_url = ? WHERE id = ? ");
                ps.setString(1,posterUrl);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(description!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET description = ? WHERE id = ? ");
                ps.setString(1,description);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(latitude!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET latitude = ? WHERE id = ? ");
                ps.setDouble(1,latitude);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(longtitude!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET longtitude = ? WHERE id = ? ");
                ps.setDouble(1,longtitude);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(agendaUrl!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET agenda_url = ? WHERE id = ? ");
                ps.setString(1,agendaUrl);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(mapUrl!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET map_url = ? WHERE id = ? ");
                ps.setString(1,mapUrl);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(websiteUrl!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET website_url = ? WHERE id = ? ");
                ps.setString(1,websiteUrl);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(preWebsiteText!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET custom_website_text = ? WHERE id = ? ");
                ps.setString(1,preWebsiteText);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(reviewUrl!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE exhibition SET review_url = ? WHERE id = ? ");
                ps.setString(1,reviewUrl);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        conn.close();
    }

    //Update booth
    @ResponseBody
    @RequestMapping(value="/{exhibiitonId}/booths/{boothId}/update",method= RequestMethod.POST)
    public void updateBooth(@RequestBody BoothObject jason, @PathVariable int boothId) throws SQLException {
        int id = boothId;
        String name = jason.getName();
        String boothCode = jason.getBoothCode();
        String description = jason.getDescription();
        int exhibitionId = jason.getExhibitionId();
        String logoUrl = jason.getLogoUrl();
        String brochureUrl = jason.getBrochureUrl();
        String email = jason.getEmail();
        String facebook = jason.getFacebook();
        String facebookUrl = jason.getFacebookUrl();
        String mobileNo = jason.getMobileNo();
        String keyword = jason.getKeywords();

        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        ResultSet rs;
        Statement stmt = conn.createStatement();
        rs = stmt.executeQuery("SELECT * FROM booth_contact WHERE booth_id = "+boothId+"");
        if(!(rs.next())){
            String insertExContact = "INSERT INTO booth_contact (email, facebook, facebook_url, mobile_no, booth_id)" +
                    "VALUES (?,?,?,?,?)";
            try {
                PreparedStatement ps1 = conn.prepareStatement(insertExContact);
                ps1.setString(1, email);
                ps1.setString(2, facebook);
                ps1.setString(3, facebookUrl);
                ps1.setString(4, mobileNo);
                ps1.setInt(5, boothId);
                ps1.executeUpdate();
            }
            catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }
        }

        if(email!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth_contact SET email = ? WHERE booth_id = ? ");
                ps.setString(1,email);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(facebook!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth_contact SET facebook = ? WHERE booth_id = ? ");
                ps.setString(1,facebook);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(facebookUrl!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth_contact SET facebook_url = ? WHERE booth_id = ? ");
                ps.setString(1,facebookUrl);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(mobileNo!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth_contact SET mobile_no = ? WHERE booth_id = ? ");
                ps.setString(1,mobileNo);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(name!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth SET name = ? WHERE id = ? ");
                ps.setString(1,name);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(boothCode!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth SET booth_code = ? WHERE id = ? ");
                ps.setString(1,boothCode);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(description!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth SET description = ? WHERE id = ? ");
                ps.setString(1,description);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(exhibitionId!=0){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth SET exhibition_id = ? WHERE id = ? ");
                ps.setInt(1,exhibitionId);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(logoUrl!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth SET logo_url = ? WHERE id = ? ");
                ps.setString(1,logoUrl);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(brochureUrl!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth SET brochure_url = ? WHERE id = ? ");
                ps.setString(1,brochureUrl);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        if(keyword!=null){
            try
            {
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE booth SET keywords = ? WHERE id = ? ");
                ps.setString(1,keyword);
                ps.setInt(2,id);
                ps.executeUpdate();
            }
            catch (SQLException ex)
            {
                System.err.println(ex.getMessage());
            }
        }
        conn.close();
    }



    public boolean checkToken(String token, String userId) throws  Exception{
        String USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0";
        //String userToken = "EAADnEZCfV0nwBAO4HYFGrnJdjIrlVV66whWgKe80UUCZCsH15B4sM55Ob3dH3ThwMv3BsZC6635c3LYPdbx9yIX3ooXmZBDa5ZBW0X9ZA0mqCWQsc36XYZBpG2uUWYa20U96ns8zvOJGIjGZBM7msrGocMQKoMjauK8I0kj0C9hCnObl22tUz4xSIuZBSfaE9k3gZD";
        String userToken = token;
        String url = "https://graph.facebook.com/debug_token?input_token="+userToken+"&access_token=254072948380284|53koftZWubLWVXH3nzUZyFbboVw";
            //"http://www.google.com/search?q=mkyong";
            //"https://graph.facebook.com/oauth/access_token?client_id=254072948380284&client_secret=d82a08cc6c73d5948212516c12671e42&grant_type=client_credentials";

        boolean isValid = false;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

            // optional default is GET
        con.setRequestMethod("GET");

            //add request header
        con.setRequestProperty("User-Agent", USER_AGENT);

        int responseCode = con.getResponseCode();
        //System.out.println("\nSending 'GET' request to URL : " + url);
        //System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();
        StringBuilder sb = new StringBuilder();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            sb.append(inputLine+"\n");
                //////////////////////////////////////////
            String sentence = inputLine;
            String search  = "true";

            if ( sentence.toLowerCase().indexOf(search.toLowerCase()) != -1&&responseCode==200 ) {

                isValid = true;
            }
                /////////////////////////////////////////
        }
        String str =sb.toString();
        in.close();

        String dburl = this.url;
        Connection conn = DriverManager.getConnection(dburl, "root", "password");
        Statement stmt = conn.createStatement();
        ResultSet rs;

        //get user id;
        try {

            rs = stmt.executeQuery("SELECT * FROM user WHERE user_id = "+userId+" ");
            while (rs.next()) {
                if (token.equalsIgnoreCase(rs.getString("access_token"))) {
                   isValid = true;
                }
            }
            //conn.close();
        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        conn.close();
        return isValid;

    }

    @RequestMapping(value = "/getUserId", method=RequestMethod.GET)
    public int getUserId(){
        int id = getUserIdna("138236010038864");

        return id;

    }

    //get user id
    public int getUserIdna(String userId){
        int id = 0;
        String check = userId;
        try {
            // url
            Connection conn = DriverManager.getConnection(url,"root","password");
            Statement stmt = conn.createStatement();
            ResultSet rs;


            rs = stmt.executeQuery("SELECT * FROM user ");
            while ( rs.next() ) {
                if(rs.getString("userId").equalsIgnoreCase(check)){
                    id = rs.getInt("id");
                }
            }
            conn.close();
        }
        catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        return id;
    }


    //search exhibition by name
    @RequestMapping(value = "/search", method=RequestMethod.GET)
    public @ResponseBody List<Exhibition> search(@RequestParam("key") String text,@RequestHeader(required = false, value = "user_id") String user_id) throws SQLException {
        String search = text;
        List<Integer> listExId = new ArrayList<Integer>();
        List<Exhibition> listEx = new ArrayList<Exhibition>();
        List<Integer> listFaveId = new ArrayList<Integer>();
        int userId = 0;
        // url
        Connection conn = DriverManager.getConnection(url,"root","password");
        Statement stmt = conn.createStatement();
        ResultSet rs;

        if(user_id!=null) {//get user id;
            try {

                rs = stmt.executeQuery("SELECT * FROM user ");
                while (rs.next()) {
                    if (user_id.equalsIgnoreCase(rs.getString("user_id"))) {
                        userId = rs.getInt("id");
                    }
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }

            try {

                rs = stmt.executeQuery("SELECT * FROM user_and_exhibition WHERE user_id = " + userId + " ");
                while (rs.next()) {
                    int i = rs.getInt("exhibition_id");
                    listFaveId.add(i);
                }
                //conn.close();
            } catch (Exception e) {
                System.err.println("Got an exception! ");
                System.err.println(e.getMessage());
            }

        }

        //search
        try {
            rs = stmt.executeQuery("SELECT * FROM exhibition ");
            while (rs.next()) {
                //if (search.equalsIgnoreCase(rs.getString("name"))) {
                if (rs.getString("name").toLowerCase().indexOf(search.toLowerCase())!=-1) {
                    System.out.println("1");
                    listExId.add(rs.getInt("id"));
                }
            }
            //conn.close();
        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }

        // i มันไม่ใช่
        for(int i = 0 ; i<listExId.size() ; i++){
            int exId = listExId.get(i);
            rs = stmt.executeQuery("SELECT * FROM exhibition WHERE id = "+exId+"");
            while(rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                String description = rs.getString("description");
                String location = rs.getString("location");
                String category = rs.getString("category");
                String startDate = rs.getString("start_date");
                String endDate = rs.getString("end_date");
                String posterUrl = rs.getString("poster_url");
                boolean isFavourited = rs.getBoolean("is_favourited");
                Double latitude = rs.getDouble("latitude");
                Double longtitude = rs.getDouble("longtitude");
                String agendaUrl = rs.getString("agenda_url");
                String mapUrl = rs.getString("map_url");
                boolean isPassed = rs.getBoolean("is_expired");
                String websiteUrl = rs.getString("website_url");
                String preWebsiteText = rs.getString("custom_website_text");

                if(user_id==null) {
                    Exhibition exhibition = new Exhibition(id, name, description, location, category, startDate, endDate, posterUrl, isFavourited, latitude
                            , longtitude, agendaUrl, mapUrl, isPassed,websiteUrl,preWebsiteText);

                    listEx.add(exhibition);
                }
                else{
                    boolean mode = false;

                    for(int j = 0 ; j < listFaveId.size() ; j++){
                        int exIndex = listFaveId.get(j);
                        if(exIndex==id) {
                            Exhibition exhibition = new Exhibition(id, name, description, location, category, startDate, endDate, posterUrl, true, latitude
                                    , longtitude, agendaUrl, mapUrl, isPassed,websiteUrl,preWebsiteText);

                            listEx.add(exhibition);
                            mode = true;
                        }
                    }
                    if(mode!=true){
                        Exhibition exhibition = new Exhibition(id, name, description, location, category, startDate, endDate, posterUrl, isFavourited, latitude
                                , longtitude, agendaUrl, mapUrl, isPassed,websiteUrl,preWebsiteText);

                        listEx.add(exhibition);
                    }
                }
            }

        }
        conn.close();
        return listEx;

    }

    @RequestMapping(value = "/test2", method=RequestMethod.GET)
    public String test2(){
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate localDate = LocalDate.now();
        String currentDate = dtf.format(localDate);
        System.out.println(currentDate);
        return currentDate;
    }
}









